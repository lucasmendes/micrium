;	Copyright(C) 2008(2009) Renesas Technology Corp. and Renesas Solutions Corp., All rights reserved.
;
;	$Id: //depot/S2/Source/RX/adpcm_encoder.mar#3 $
;	$Date: 2009/12/06 $


		.section    .text
			
		.glb	_adpcm_stepsizeTable
		.glb	_adpcm_idxT4

;	typedef struct {
;		uint8_t cb[3];		// cord buffer
;		uint8_t *cp;		// pointer to ADPCM cord data
;		int16_t *ip;		// pointer to input data
;		int16_t vp_e;		// predicted value
;		int16_t id_e;		// index
;		int16_t st_e;		// Step size
;	} adpcm_env;


; Synopsis
;		#include "r_adpcm.h"
;		void
;		R_adpcm_initEnc(adpcm_enc *wenv);
; Description:
;		The R_adpcm_initEnc() initializes ADPCM encoder.
;		The function initializes internal variables in a working area 
;		specified by wenv.
;		The structure's members, input and output shall be 
;		initialized by the user.
; Return Value
;		None

		.glb	_R_adpcm_initEnc
_R_adpcm_initEnc:

;	vp_e <- 0
;	id_e <- MIN_ENCINDEX4	// support only 4 bits
;	st_e <- enc_stepsizeTable[encadpcm.id_e];

		mov.w	#0, 12[r1]
		mov.l	#2, r2
		mov.w	r2,14[r1]
		mov.l	#_adpcm_stepsizeTable, r3
		mov.w	[r2,r3], r2
		mov.w	r2, 16[r1]
		rts


; Synopsis
;		#include "r_adpcm.h"
;		int16_t
;		R_adpcm_encode(int16_t smpln, adpcm_enc *wenv);
; Description:
;		The R_adpcm_encode() encodes smpln (No. of samples) PCM data specified by wenv.
;		Input data are read from and the encoded data are stored to 
;		the memory area specified by the function R_adpcm_initEnc
; Return Value
;		The R_adpcm_encode() returns 0 when normally exit.
;		The R_adpcm_encode() returns -1 when some errors occur.

		.glb	_R_adpcm_encode
_R_adpcm_encode:
		pushm	r6-r7

;		mov.l	r2, R15
		tst		#3, r1
		bne		ERROR_EXIT

		cmp		#0, r1
		ble		EXIT

		mov.l	#_adpcm_idxT4, r15
		mov.l	#_adpcm_stepsizeTable, r3
ENC_LOOP:
		mov.l	8[r2], r4
		add		#2, r4, r5
		mov.l	r5, 8[r2]
		mov.w	[r4], r6
		mov.w	12[r2], r5
		sub		r5, r6
		mov.w	r6, r6
		cmp		#0, r6
		blt		NEG_DIFF	; switch when diff is negative

		mov.w	16[r2], r5
		sub		r7, r7		;	MOV.L #0, r7			
		shar	#3, r5, r4			
		cmp		r5, r6			
		blt		?+			
		mov.w	r4, r4			
		add		r5, r4			
		mov.l	#4, r7			
		sub		r5, r6			
						
?:			
		shar	#1, r5			
;		mov.w	r6, r6	; No need			
		cmp		r5, r6			
		blt		?+			
		mov.w	r4, r4			
		add		r5, r4			
		bset	#1, r7			
		sub		r5, r6			
?:			
		shar	#1, r5			
;		mov.w	r6, r6	; No need			
		cmp		r5, r6			
		blt		?+			
		mov.w	r4, r4			
		add		r5, r4			
		bset	#0, r7			
			
?:			
		btst	#0, r1			
		bne		?+			
		shll	#4, r7, r6			
		mov.b	r6, [r2]			
		bra		UPDATE_PRED_0			
?:			
		movu.b	[r2], r6			
		mov.l	4[r2], r5			
		or		r7, r6			
		mov.b	r6, [r2]			
		mov.b	r6, [r5]			
		add		#1, r5			
		mov.l	r5, 4[r2]
						
UPDATE_PRED_0:			
		mov.w	12[r2], r5		

		add		r4, r5			
		bra		SATURATE			

NEG_DIFF:
		neg		r6						
		mov.w	16[r2], r5			
			
		sub		r7, r7		;	MOV.L #0, r7			
		shar	#3, r5, r4			
		cmp		r5, r6			
		blt		?+			
		mov.w	r4, r4			
		add		r5, r4			
		mov.l	#4, r7			
		sub		r5, r6			
						
?:			
		shar	#1, r5			
;		mov.w	r6, r6	; No need			
		cmp		r5, r6			
		blt		?+			
		mov.w	r4, r4			
		add		r5, r4			
		bset	#1, r7			
		sub		r5, r6			
?:			
		shar	#1, r5			
;		mov.w	r6, r6	; No need			
		cmp		r5, r6			
		blt		?+			
		mov.w	r4, r4			
		add		r5, r4			
		bset	#0, r7
			
?:			
		bset	#3, r7
		btst	#0, r1			
		bne		?+			
		shll	#4, r7, r6			
		mov.b	r6, [r2]			
		bra		UPDATE_PRED_1			
?:			
		movu.b	[r2], r6			
		mov.l	4[r2], r5			
		or		r7, r6			
		mov.b	r6, [r2]			
		mov.b	r6, [r5]			
		add		#1, r5			
		mov.l	r5, 4[r2]			

UPDATE_PRED_1:			
		mov.w	12[r2], r5
		sub		r4, r5					

SATURATE:
		mov.w	r5, r5
		min		#29490, r5
		max		#-29491, r5
		mov.w	r5, 12[r2]

		mov.w	14[r2], r4
		mov.b	[r7, r15], r5
		add		r5, r4
		max		#2, r4
		min		#87, r4
		mov.w	r4,14[r2]
		mov.w	[r4, r3], r5
		mov.w	r5, 16[r2]
		sub		#1, r1
		bnz		ENC_LOOP

EXIT:
		mov.l	#0, r1
		rtsd	#8, r6-r7

ERROR_EXIT:
		mov.l	#-1, r1
		rtsd	#8, r6-r7

; Synopsis
;		#include "r_adpcm.h"
;		void
;		R_adpcm_refreshEnc(int16_t *inputAddr, uint8_t *outputAddr, adpcm_enc *wenv);
; Description:
;		The R_adpcm_refreshEnc() resets the pointer to input data and ADPCM cord data in a working area
;		specified by wenv to inputAddr (pointer to input data) and outputAddr, respectively. 
;		Other data are not modified.
; Return Value
;		None

		.glb	_R_adpcm_refreshEnc
_R_adpcm_refreshEnc:
		mov.l	r1, 8[r3]
		mov.l	r2, 4[r3]
		rts
	
		.end
